#
# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

sidetree:
  channel: mychannel
  user: User1


client:

  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: peerorg1

  logging:
    level: info

  # Global configuration for peer, event service and orderer timeouts
  peer:
    timeout:
      connection: 5s
      response: 20s
      discovery:
        # Expiry period for discovery service greylist filter
        # The channel client will greylist peers that are found to be offline
        # to prevent re-selecting them in subsequent retries.
        # This interval will define how long a peer is greylisted
        greylistExpiry: 5s
  eventService:
    timeout:
      connection: 30s
      registrationResponse: 10s
  orderer:
    timeout:
      connection: 3s
      response: 10s
  global:
    timeout:
      query: 120s
      execute: 120s
      resmgmt: 120s
    cache:
      connectionIdle: 5s
      eventServiceIdle: 2m
      channelConfig: 60s
      channelMembership: 30s
      discovery: 1s
      selection: 1s

  # Root of the MSP directories with keys and certs.
  cryptoconfig:
    path: /etc/crypto-config

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # [Optional]. Not used by Go SDK. Others SDKs may use it if using an alternative impl
    # Could be used if SDK would require an object for properties like url, db name, etc.
    path: "/tmp/hfc-kvs"

    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations
    # requiring a key store. PKCS#11 based implementations does not.
    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: /tmp/msp

    # BCCSP config for the client. Used by GO SDK.
  BCCSP:
    security:
      enabled: true
      default:
        provider: "SW"
      hashAlgorithm: "SHA2"
      softVerify: true
      ephemeral: false
      level: 256

  tlsCerts:
    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
    systemCertPool: false

    client:
      key:
        path: /etc/crypto-config/peerOrganizations/tls.example.com/users/User1@tls.example.com/tls/client.key
      cert:
        path: /etc/crypto-config/peerOrganizations/tls.example.com/users/User1@tls.example.com/tls/client.crt

channels:
  _default:
    policies:
      discovery:
        #[Optional] Maximum number of random targets
        maxTargets: 2
        #[Optional] retry options
        retryOpts:
          #[Optional] number of retry attempts
          attempts: 8
          #[Optional] the back off interval for the first retry attempt
          initialBackoff: 500ms
          #[Optional] the maximum back off interval for any retry attempt
          maxBackoff: 2s
          #[Optional] the factor by which the initial back off period is exponentially incremented
          backoffFactor: 2.0
      queryChannelConfig:
        #[Optional] min number of success responses (from targets/peers)
        minResponses: 1
        #[Optional] channel config will be retrieved for these number of random targets
        maxTargets: 2
        #[Optional] retry options for query config block
        retryOpts:
          #[Optional] number of retry attempts
          attempts: 5
          #[Optional] the back off interval for the first retry attempt
          initialBackoff: 100ms
          #[Optional] the maximum back off interval for any retry attempt
          maxBackoff: 2s
          #[Optional] the factor by which the initial back off period is exponentially incremented
          backoffFactor: 2.0

  # name of the channel
  mychannel:
    # Required. list of peers from participating orgs
    peers:
      peer0.org1.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

      peer1.org1.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

#
# list of participating organizations in this network
#
organizations:
  peerorg1:
    mspid: Org1MSP

    # Needed to load users crypto keys and certs for this org (absolute path or relative to global crypto path, DEV mode)
    # for PROD with no cert access through volume mappings, use 'users' and embed user certs/keys directly, do not use 'cryptoPath'
    # for DEV mode, cryptoPath below works as an alternative
    #cryptoPath:  fixtures/channel/crypto-config/peerOrganizations/org1.example.com/users/{userName}@org1.example.com/msp
    cryptoPath:  peerOrganizations/org1.example.com/users/{username}@org1.example.com/msp

    peers:
      - peer0.org1.example.com
      - peer1.org1.example.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  _default:
    grpcOptions:
      grpc.http2.keepalive_time: 15
      #     These parameters should be set in coordination with the keepalive policy on the server,
      #     as incompatible settings can result in closing of connection.
      #     When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: true
      #will be taken into consideration if address has no protocol defined and secured connection fails
      allow-insecure: false

  peer0.org1.example.com:
    # this URL is used to send endorsement and query requests
    url: peer0.org1.example.com:7051

    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com

    tlsCACerts:
      # Certificate location absolute path
      path: /etc/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem

  peer1.org1.example.com:
    # this URL is used to send endorsement and query requests
    url: peer1.org1.example.com:7051

    grpcOptions:
      ssl-target-name-override: peer1.org1.example.com

    tlsCACerts:
      # Certificate location absolute path
      path: /etc/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem

orderers:
  orderer.example.com:
    url:  orderer.example.com:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer.example.com
      grpc-max-send-message-length: 15
      #     These parameters should be set in coordination with the keepalive policy on the server,
      #     as incompatible settings can result in closing of connection.
      #     When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: true
      #will be taken into consideration if address has no protocol defined and secured connection fails
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: /etc/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

entityMatchers:

  peer:
    - pattern: peer0.org1.example.com:(\d+)
      urlSubstitutionExp: peer0.org1.example.com:7051
      mappedHost: peer0.org1.example.com

    - pattern: peer1.org1.example.com:(\d+)
      urlSubstitutionExp: peer1.org1.example.com:7051
      mappedHost: peer1.org1.example.com

  orderer:
    - pattern: (\w+).example.(\w+)
      urlSubstitutionExp: orderer.example.com:7050
      sslTargetOverrideUrlSubstitutionExp: orderer.example.com
      mappedHost: orderer.example.com
